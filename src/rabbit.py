import aio_pika
from fastapi import HTTPException
from starlette.responses import Response

from src.config import RABBITMQ_URL, QUEUE_NAME, logger
from src.models import InputMessage


class RabbitMQService:
    """
    –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—â–∏–π –ª–µ–Ω–∏–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.
    """

    def __init__(self, url: str, queue_name: str):
        self.url = url
        self.queue_name = queue_name
        self._connection: aio_pika.RobustConnection | None = None
        self._channel: aio_pika.Channel | None = None

    async def connect(self) -> aio_pika.Channel:
        """
        –°–æ–∑–¥–∞—ë—Ç –∏/–∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª RabbitMQ.
        –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç—ã) ‚Äî
        –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –∑–∞–Ω–æ–≤–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ –¥–µ–∫–ª–∞—Ä–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å.
        """
        if not self._connection or self._connection.is_closed:
            logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ...")
            self._connection = await aio_pika.connect_robust(self.url)
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        if not self._channel or self._channel.is_closed:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ RabbitMQ...")
            self._channel = await self._connection.channel()
            await self._channel.declare_queue(self.queue_name, durable=True)
            logger.info(f"‚úÖ –û—á–µ—Ä–µ–¥—å '{self.queue_name}' —Å–æ–∑–¥–∞–Ω–∞/—Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        return self._channel

    async def send_message(self, message: InputMessage) -> Response:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞—è—Å—å,
        —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ.
        """
        try:
            channel = await self.connect()
            await channel.default_exchange.publish(
                aio_pika.Message(
                    body=message.model_dump_json().encode(),
                    delivery_mode=aio_pika.DeliveryMode.PERSISTENT,
                ),
                routing_key=self.queue_name,
            )
            logger.info("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RabbitMQ.")
            return Response(status_code=200, content="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ:", exc_info=e)
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ RabbitMQ")

    async def close_connection(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ, –µ—Å–ª–∏ –æ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ.
        """
        if self._connection and not self._connection.is_closed:
            logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ...")
            await self._connection.close()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ.")


rabbitmq_service = RabbitMQService(RABBITMQ_URL, QUEUE_NAME)
