import asyncio

import aio_pika
import httpx
from pydantic import HttpUrl
from sqlalchemy.ext.asyncio import AsyncSession

from src.config import logger, RABBITMQ_URL, QUEUE_NAME
from src.database import (
    get_async_session,
    insert_message,
    Role,
    get_all_messages,
    DBMessage,
    create_tables,
)
from src.models import InputMessage
from src.openai_service import get_answer


def get_messages_list_as_json(messages: list[DBMessage]) -> list[dict]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ DBMessage –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ OpenAI.
    """
    return [
        {
            "role": message.role,
            "content": message.content
        }
        for message in messages
    ]


async def process_message(session: AsyncSession, input_message: InputMessage) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î, –ø–æ–ª—É—á–∞–µ—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —É AI-–º–æ–¥–µ–ª–∏. –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    """
    await insert_message(session, input_message.message, Role.user)

    all_msgs = await get_all_messages(session)
    all_msgs_json = get_messages_list_as_json(all_msgs)
    logger.debug(f"üîπ –¢–µ–∫—É—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞: {all_msgs_json}")

    answer = await get_answer(all_msgs_json)
    logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç AI –ø–æ–ª—É—á–µ–Ω")
    logger.debug(f"üìú –û—Ç–≤–µ—Ç: {answer}")

    await insert_message(session, answer, Role.assistant)

    return answer


async def send_answer(callback_url: HttpUrl, answer: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç (answer) –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É callback_url,
    –ª–æ–≥–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏.
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(str(callback_url), json={"message": answer})
            logger.info(f"üì® –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}")
    except httpx.HTTPError as exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {exc}")


async def callback(message: aio_pika.IncomingMessage) -> None:
    """
    –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (InputMessage), —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ callback_url.
    """
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç RabbitMQ")

    input_message = InputMessage.model_validate_json(message.body.decode())

    async with message.process():
        async with get_async_session() as session:
            answer = await process_message(session, input_message)
            await send_answer(input_message.callback_url, answer)


async def consume() -> None:
    """
    –°–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
    (–ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).
    """
    await create_tables()

    connection = await aio_pika.connect_robust(RABBITMQ_URL)
    async with connection:
        channel = await connection.channel()
        queue = await channel.declare_queue(QUEUE_NAME, durable=True)

        logger.info("üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç RabbitMQ...")
        await queue.consume(callback)

        await asyncio.Future()


async def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏,
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å RabbitMQ –∏ –ë–î.
    """
    try:
        await consume()
    except (aio_pika.exceptions.AMQPError, ConnectionError) as exc:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ:", exc_info=exc)
    except Exception as exc:
        logger.exception("‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:", exc_info=exc)


if __name__ == "__main__":
    asyncio.run(main())