from contextlib import asynccontextmanager
from datetime import datetime
from enum import Enum
from sqlalchemy import Enum as EnumSQL, select, delete
from sqlalchemy.orm import declarative_base, Mapped, mapped_column
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from src.config import logger, DATABASE_URL


engine = create_async_engine(DATABASE_URL)
async_session = async_sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()


class Role(str, Enum):
    """–†–æ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user = "user"
    assistant = "assistant"


class DBMessage(Base):
    """–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    __tablename__ = "messages"

    id: Mapped[int] = mapped_column(primary_key=True)
    created_at: Mapped[datetime] = mapped_column(default=datetime.utcnow)  # UTC - –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

    content: Mapped[str]
    role: Mapped[Role] = mapped_column(EnumSQL(Role), nullable=False)


@asynccontextmanager
async def get_async_session() -> AsyncSession:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"""
    async with async_session() as session:
        yield session


async def insert_message(session: AsyncSession, content: str, role: Role):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        new_message = DBMessage(content=content, role=role)
        session.add(new_message)
        await session.commit()
        await session.refresh(new_message)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID={new_message.id} ({role})")
        return new_message
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", exc_info=e)
        await session.rollback()
        return None


async def get_all_messages(session: AsyncSession):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã"""
    try:
        query = select(DBMessage).order_by(DBMessage.created_at.asc())
        result = await session.execute(query)
        messages = result.scalars().all()
        logger.debug(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î")
        return messages
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:", exc_info=e)
        return []


async def delete_message_by_id(session: AsyncSession, message_id: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –ø–æ –µ–≥–æ ID, –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"""
    try:
        query = delete(DBMessage).where(DBMessage.id == message_id)
        result = await session.execute(query)
        await session.commit()
        if result.rowcount:
            logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID={message_id}")
        else:
            logger.warning(f"‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ ID={message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ID={message_id}:", exc_info=e)
        await session.rollback()


async def delete_all_messages(session: AsyncSession):
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
    try:
        query = delete(DBMessage)
        await session.execute(query)
        await session.commit()
        logger.info("üóë –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î:", exc_info=e)


async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    async with engine.begin() as conn:
        logger.info("üõ† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î...")
        await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
