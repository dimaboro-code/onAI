import redis.asyncio as redis
from contextlib import asynccontextmanager

from fastapi import Depends, FastAPI, HTTPException
from fastapi_limiter import FastAPILimiter
from fastapi_limiter.depends import RateLimiter
from starlette.responses import JSONResponse

from src.config import TIMES_TO_LIMIT, SECONDS_TO_LIMIT, REDIS_URL, logger, APP_PORT, APP_HOST
from src.rabbit import rabbitmq_service
from src.models import InputMessage
from src.database import delete_all_messages, get_async_session


@asynccontextmanager
async def lifespan(_: FastAPI):
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç FastAPI-limiter, –∞ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∏ RabbitMQ.
    """
    try:
        logger.info("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis...")
        redis_connection = redis.from_url(
            REDIS_URL,
            encoding="utf8",
            decode_responses=True
        )
        await FastAPILimiter.init(redis_connection)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis")
    except Exception as exc:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis:", exc_info=exc)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")

    yield

    logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ Redis –∏ RabbitMQ
    try:
        await FastAPILimiter.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as exc:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis:", exc_info=exc)

    try:
        await rabbitmq_service.close_connection()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")
    except Exception as exc:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å RabbitMQ:", exc_info=exc)


app = FastAPI(lifespan=lifespan)


@app.post(
    "/webhook",
    dependencies=[Depends(RateLimiter(times=TIMES_TO_LIMIT, seconds=SECONDS_TO_LIMIT))]
)
async def send_message_to_rabbitmq(message: InputMessage):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ RateLimiter.
    """
    logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    logger.debug(f"üìú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.model_dump_json()}")
    response = await rabbitmq_service.send_message(message)
    return response


@app.get("/delete_dialog_data")
async def delete_dialog_data(session=Depends(get_async_session)):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞) –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    logger.info("üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞")
    try:
        await delete_all_messages(session)
        message = "‚úÖ –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω—ã"
        logger.info(message)
        return JSONResponse(status_code=200, content={"message": message})
    except Exception as exc:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞:", exc_info=exc)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–∞")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host=APP_HOST, port=APP_PORT)
